// Mocks generated by Mockito 5.0.10 from annotations
// in test_app/test/feature_login/blocs/login_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test_app/base/common_blocs/coordinator_bloc.dart' as _i2;
import 'package:test_app/base/common_use_cases/login_use_case.dart' as _i4;
import 'package:test_app/base/utils/validators/validators.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeCoordinatorEvents extends _i1.Fake implements _i2.CoordinatorEvents {
}

class _FakeCoordinatorStates extends _i1.Fake implements _i2.CoordinatorStates {
}

/// A class which mocks [LoginFieldValidators].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginFieldValidators extends _i1.Mock
    implements _i3.LoginFieldValidators {
  MockLoginFieldValidators() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String validateEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#validateEmail, [email]),
          returnValue: '') as String);
  @override
  String validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
          returnValue: '') as String);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i4.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> execute({String? username, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #execute, [], {#username: username, #password: password}),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [CoordinatorBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocType extends _i1.Mock
    implements _i2.CoordinatorBlocType {
  MockCoordinatorBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CoordinatorEvents get events =>
      (super.noSuchMethod(Invocation.getter(#events),
          returnValue: _FakeCoordinatorEvents()) as _i2.CoordinatorEvents);
  @override
  _i2.CoordinatorStates get states =>
      (super.noSuchMethod(Invocation.getter(#states),
          returnValue: _FakeCoordinatorStates()) as _i2.CoordinatorStates);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [CoordinatorEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorEvents extends _i1.Mock implements _i2.CoordinatorEvents {
  MockCoordinatorEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void authenticated({bool? isAuthenticated}) => super.noSuchMethod(
      Invocation.method(
          #authenticated, [], {#isAuthenticated: isAuthenticated}),
      returnValueForMissingStub: null);
}
